// Copyright 2020 ETH Zurich and University of Bologna.
// Solderpad Hardware License, Version 0.51, see LICENSE for details.
// SPDX-License-Identifier: SHL-0.51

// Author: Florian Zaruba <zarubaf@iis.ee.ethz.ch>
// Author: Fabian Schuiki <fschuiki@iis.ee.ethz.ch>

// AUTOMATICALLY GENERATED by occamygen.py; edit the script instead.
<%
  #// Note: controller introduces *one* cut stage on both narrow bus directions
  cuts_narrx_with_cluster = 0
  cuts_widex_with_cluster = 0
  cuts_narrx_with_ctrl = 1
  cuts_widexpost_with_wideiwc_out = 1
  cuts_wideisolate_with_wideiwc_in = 1
  cuts_wideiwc_with_wideout = 1
  nr_clusters = int(cfg["s1_quadrant"]["nr_clusters"])
  wide_trans = int(cfg["s1_quadrant"]["wide_trans"])
  narrow_trans = int(cfg["s1_quadrant"]["narrow_trans"])
  ro_cache_cfg = cfg["s1_quadrant"].get("ro_cache_cfg", {})
  ro_cache_regions = ro_cache_cfg.get("address_regions", 1)
  narrow_tlb_cfg = cfg["s1_quadrant"].get("narrow_tlb_cfg", {})
  narrow_tlb_entries = narrow_tlb_cfg.get("l1_num_entries", 1)
  wide_tlb_cfg = cfg["s1_quadrant"].get("wide_tlb_cfg", {})
  wide_tlb_entries = wide_tlb_cfg.get("l1_num_entries", 1)
  en_floonoc = int(cfg["s1_quadrant"]["en_floonoc"])
  x_num = int(cfg["s1_quadrant"]["noc_x_num"])
  y_num = int(cfg["s1_quadrant"]["noc_y_num"])
%>

`include "axi/typedef.svh"
`include "axi_tlb/typedef.svh"
`include "floo_noc/typedef.svh"

%if en_floonoc:

package floo_narrow_wide_pkg;

  import floo_pkg::*;

  ////////////////////////
  //   AXI Parameters   //
  ////////////////////////

   typedef enum {
    NarrowAw = 0,
           NarrowW = 1,
           NarrowAr = 2,
           WideAw = 3,
           WideAr = 4,
           NarrowB = 5,
           NarrowR = 6,
           WideB = 7,
           WideW = 8,
           WideR = 9,
           NumAxiChannels = 10
  } axi_ch_e;

  localparam int unsigned NarrowInAddrWidth = 48;
  localparam int unsigned NarrowInDataWidth = 64;
  localparam int unsigned NarrowInIdWidth = 4;
  localparam int unsigned NarrowInUserWidth = 5;

  localparam int unsigned NarrowOutAddrWidth = 48;
  localparam int unsigned NarrowOutDataWidth = 64;
  localparam int unsigned NarrowOutIdWidth = 2;
  localparam int unsigned NarrowOutUserWidth = 5;

  localparam int unsigned WideInAddrWidth = 48;
  localparam int unsigned WideInDataWidth = 512;
  localparam int unsigned WideInIdWidth = 3;
  localparam int unsigned WideInUserWidth = 1;

  localparam int unsigned WideOutAddrWidth = 48;
  localparam int unsigned WideOutDataWidth = 512;
  localparam int unsigned WideOutIdWidth = 1;
  localparam int unsigned WideOutUserWidth = 1;

  typedef logic [NarrowInAddrWidth-1:0] axi_narrow_in_addr_t;
  typedef logic [NarrowInDataWidth-1:0] axi_narrow_in_data_t;
  typedef logic [NarrowInDataWidth/8-1:0] axi_narrow_in_strb_t;
  typedef logic [NarrowInIdWidth-1:0] axi_narrow_in_id_t;
  typedef logic [NarrowInUserWidth-1:0] axi_narrow_in_user_t;

  typedef logic [NarrowOutAddrWidth-1:0] axi_narrow_out_addr_t;
  typedef logic [NarrowOutDataWidth-1:0] axi_narrow_out_data_t;
  typedef logic [NarrowOutDataWidth/8-1:0] axi_narrow_out_strb_t;
  typedef logic [NarrowOutIdWidth-1:0] axi_narrow_out_id_t;
  typedef logic [NarrowOutUserWidth-1:0] axi_narrow_out_user_t;

  typedef logic [WideInAddrWidth-1:0] axi_wide_in_addr_t;
  typedef logic [WideInDataWidth-1:0] axi_wide_in_data_t;
  typedef logic [WideInDataWidth/8-1:0] axi_wide_in_strb_t;
  typedef logic [WideInIdWidth-1:0] axi_wide_in_id_t;
  typedef logic [WideInUserWidth-1:0] axi_wide_in_user_t;

  typedef logic [WideOutAddrWidth-1:0] axi_wide_out_addr_t;
  typedef logic [WideOutDataWidth-1:0] axi_wide_out_data_t;
  typedef logic [WideOutDataWidth/8-1:0] axi_wide_out_strb_t;
  typedef logic [WideOutIdWidth-1:0] axi_wide_out_id_t;
  typedef logic [WideOutUserWidth-1:0] axi_wide_out_user_t;

  `AXI_TYPEDEF_ALL_CT(axi_narrow_in, axi_narrow_in_req_t, axi_narrow_in_rsp_t, axi_narrow_in_addr_t, axi_narrow_in_id_t, axi_narrow_in_data_t, axi_narrow_in_strb_t, axi_narrow_in_user_t)
  `AXI_TYPEDEF_ALL_CT(axi_narrow_out, axi_narrow_out_req_t, axi_narrow_out_rsp_t, axi_narrow_out_addr_t, axi_narrow_out_id_t, axi_narrow_out_data_t, axi_narrow_out_strb_t, axi_narrow_out_user_t)
  `AXI_TYPEDEF_ALL_CT(axi_wide_in, axi_wide_in_req_t, axi_wide_in_rsp_t, axi_wide_in_addr_t, axi_wide_in_id_t, axi_wide_in_data_t, axi_wide_in_strb_t, axi_wide_in_user_t)
  `AXI_TYPEDEF_ALL_CT(axi_wide_out, axi_wide_out_req_t, axi_wide_out_rsp_t, axi_wide_out_addr_t, axi_wide_out_id_t, axi_wide_out_data_t, axi_wide_out_strb_t, axi_wide_out_user_t)

  /////////////////////////
  //   Header Typedefs   //
  /////////////////////////

  localparam route_algo_e RouteAlgo = XYRouting;
  typedef logic [8:0] rob_idx_t;

  localparam int unsigned NumX = ${x_num};
  localparam int unsigned NumY = ${y_num};

  typedef struct packed {                             
    logic [$clog2(NumX+1)-1:0] x;                       
    logic [$clog2(NumY+1)-1:0] y;                       
  } xy_id_t;

  typedef struct packed {
    logic rob_req;
    rob_idx_t rob_idx;
    xy_id_t dst_id;
    xy_id_t src_id;
    logic last;
    logic atop;
    axi_ch_e axi_ch;
  } hdr_t;

    ////////////////////////////
    //   AXI Flits Typedefs   //
    ////////////////////////////

    typedef struct packed {
        hdr_t hdr;
        axi_narrow_in_aw_chan_t aw;
    } floo_narrow_aw_flit_t;

    typedef struct packed {
        hdr_t hdr;
        axi_narrow_in_w_chan_t w;
        logic [13:0] rsvd;
    } floo_narrow_w_flit_t;

    typedef struct packed {
        hdr_t hdr;
        axi_narrow_in_b_chan_t b;
        logic [64:0] rsvd;
    } floo_narrow_b_flit_t;

    typedef struct packed {
        hdr_t hdr;
        axi_narrow_in_ar_chan_t ar;
        logic [5:0] rsvd;
    } floo_narrow_ar_flit_t;

    typedef struct packed {
        hdr_t hdr;
        axi_narrow_in_r_chan_t r;
    } floo_narrow_r_flit_t;

    typedef struct packed {
        hdr_t hdr;
        axi_wide_in_aw_chan_t aw;
        logic [4:0] rsvd;
    } floo_wide_aw_flit_t;

    typedef struct packed {
        hdr_t hdr;
        axi_wide_in_w_chan_t w;
    } floo_wide_w_flit_t;

    typedef struct packed {
        hdr_t hdr;
        axi_wide_in_b_chan_t b;
        logic [69:0] rsvd;
    } floo_wide_b_flit_t;

    typedef struct packed {
        hdr_t hdr;
        axi_wide_in_ar_chan_t ar;
        logic [10:0] rsvd;
    } floo_wide_ar_flit_t;

    typedef struct packed {
        hdr_t hdr;
        axi_wide_in_r_chan_t r;
        logic [58:0] rsvd;
    } floo_wide_r_flit_t;


    ////////////////////////////////
    //   Generic Flits Typedefs   //
    ////////////////////////////////

    typedef struct packed {
        hdr_t hdr;
        logic [91:0] rsvd;
    } floo_req_generic_flit_t;

    typedef struct packed {
        hdr_t hdr;
        logic [75:0] rsvd;
    } floo_rsp_generic_flit_t;

    typedef struct packed {
        hdr_t hdr;
        logic [577:0] rsvd;
    } floo_wide_generic_flit_t;


    //////////////////////////
    //   Channel Typedefs   //
    //////////////////////////

    typedef union packed {
        floo_narrow_aw_flit_t narrow_aw;
        floo_narrow_w_flit_t narrow_w;
        floo_narrow_ar_flit_t narrow_ar;
        floo_wide_aw_flit_t wide_aw;
        floo_wide_ar_flit_t wide_ar;
        floo_req_generic_flit_t generic;
    } floo_req_chan_t;

    typedef union packed {
        floo_narrow_b_flit_t narrow_b;
        floo_narrow_r_flit_t narrow_r;
        floo_wide_b_flit_t wide_b;
        floo_rsp_generic_flit_t generic;
    } floo_rsp_chan_t;

    typedef union packed {
        floo_wide_w_flit_t wide_w;
        floo_wide_r_flit_t wide_r;
        floo_wide_generic_flit_t generic;
    } floo_wide_chan_t;

    ///////////////////////
    //   Link Typedefs   //
    ///////////////////////

    typedef struct packed {
        logic valid;
        logic ready;
        floo_req_chan_t req;
    } floo_req_t;

    typedef struct packed {
        logic valid;
        logic ready;
        floo_rsp_chan_t rsp;
    } floo_rsp_t;

    typedef struct packed {
        logic valid;
        logic ready;
        floo_wide_chan_t wide;
    } floo_wide_t;

endpackage

%endif


/// Occamy Stage 1 Quadrant
module ${name}_quadrant_s1
  import ${name}_pkg::*;
  %if en_floonoc:
  import floo_pkg::*;
  import floo_narrow_wide_pkg::*;
  %endif
(
  input  logic                         clk_i,
  input  logic                         rst_ni,
  input  logic                         test_mode_i,
  input  tile_id_t                     tile_id_i,
  input  logic [NrCoresS1Quadrant-1:0] meip_i,
  input  logic [NrCoresS1Quadrant-1:0] mtip_i,
  input  logic [NrCoresS1Quadrant-1:0] msip_i,
  // Next-Level
  output ${soc_narrow_xbar.in_s1_quadrant_0.req_type()} quadrant_narrow_out_req_o,
  input  ${soc_narrow_xbar.in_s1_quadrant_0.rsp_type()} quadrant_narrow_out_rsp_i,
  input  ${soc_narrow_xbar.out_s1_quadrant_0.req_type()} quadrant_narrow_in_req_i,
  output ${soc_narrow_xbar.out_s1_quadrant_0.rsp_type()} quadrant_narrow_in_rsp_o,
  output ${quadrant_pre_xbars[0].in_quadrant.req_type()} quadrant_wide_out_req_o,
  input  ${quadrant_pre_xbars[0].in_quadrant.rsp_type()} quadrant_wide_out_rsp_i,
  input  ${quadrant_inter_xbar.out_quadrant_0.req_type()} quadrant_wide_in_req_i,
  output ${quadrant_inter_xbar.out_quadrant_0.rsp_type()} quadrant_wide_in_rsp_o,
  // SRAM configuration
  input  sram_cfg_quadrant_t sram_cfg_i
);

 // Calculate cluster base address based on `tile id`.
  addr_t [${nr_clusters-1}:0] cluster_base_addr;
  % for i in range(nr_clusters):
  assign cluster_base_addr[${i}] = ClusterBaseOffset + tile_id_i * NrClustersS1Quadrant * ClusterAddressSpace + ${i} * ClusterAddressSpace;
  %endfor

  // Define types for IOTLBs
  `AXI_TLB_TYPEDEF_ALL(tlb, logic [AddrWidth-12-1:0], logic [AddrWidth-12-1:0])

  // Signals from Controller
  logic clk_quadrant, rst_quadrant_n;
  logic [3:0] isolate, isolated;
  logic ro_enable, ro_flush_valid, ro_flush_ready;
  logic [${ro_cache_regions-1}:0][${quadrant_pre_xbars[0].in_quadrant.aw-1}:0] ro_start_addr, ro_end_addr;
  %if narrow_tlb_cfg:
  logic narrow_tlb_enable;
  tlb_entry_t [${narrow_tlb_entries-1}:0] narrow_tlb_entries;
  % endif
  %if wide_tlb_cfg:
  logic wide_tlb_enable;
  tlb_entry_t [${wide_tlb_entries-1}:0] wide_tlb_entries;
  % endif
  % if en_floonoc:
    // AXI bus with 48 bit address, 64 bit data, 2 bit IDs, and 5 bit user data.
  `AXI_TYPEDEF_ALL_CT(axi_a48_d64_i2_u5, axi_a48_d64_i2_u5_req_t, axi_a48_d64_i2_u5_resp_t,
                      logic [47:0], logic [1:0], logic [63:0], logic [7:0], logic [4:0])

  // AXI bus with 48 bit address, 512 bit data, 1 bit IDs, and 0 bit user data.
  `AXI_TYPEDEF_ALL_CT(axi_a48_d512_i1_u0, axi_a48_d512_i1_u0_req_t, axi_a48_d512_i1_u0_resp_t,
                      logic [47:0], logic [0:0], logic [511:0], logic [63:0], logic [0:0])

  // AXI bus with 48 bit address, 512 bit data, 2 bit IDs, and 0 bit user data.
  `AXI_TYPEDEF_ALL_CT(axi_a48_d512_i2_u0, axi_a48_d512_i2_u0_req_t, axi_a48_d512_i2_u0_resp_t,
                      logic [47:0], logic [1:0], logic [511:0], logic [63:0], logic [0:0])    
  % endif

  % if en_floonoc:
  ///////////////////
  //   FlooNoC     //
  ///////////////////
  localparam int unsigned NumX = ${x_num};
  localparam int unsigned NumY = ${y_num};
  localparam int unsigned NumMax = (NumX > NumY) ? NumX : NumY;

  localparam addr_t ClusterBasedAddr = occamy_pkg::ClusterBaseOffset;
  localparam addr_t MemSize = occamy_pkg::ClusterAddressSpace;

  // Narrow Wide Chimney parameters
  localparam bit CutAx = 1'b1;
  localparam bit CutRsp = 1'b0;
  localparam bit NarrowRoBSimple = 1'b1;
  localparam int unsigned NarrowMaxTxnsPerId = 4;
  localparam int unsigned NarrowReorderBufferSize = 32'd256;
  localparam bit WideRoBSimple = 1'b0;
  localparam int unsigned WideMaxTxnsPerId = 32;
  localparam int unsigned WideReorderBufferSize = 32'd64;
  localparam int unsigned NarrowMaxTxns = 32;
  localparam int unsigned WideMaxTxns = 32;
  localparam route_algo_e RouteAlgo = XYRouting;
  localparam int unsigned XYAddrOffsetX = $clog2(MemSize); // clog2(256KB) = 18
  localparam int unsigned XYAddrOffsetY = $clog2(MemSize) + $clog2(NumX); // 18+2 = 20
  localparam int unsigned XYIdWidthX = $clog2(NumX);
  localparam int unsigned XYIdWidthY = $clog2(NumY);
  localparam int unsigned ChannelFifoDepth = 2;
  localparam int unsigned OutputFifoDepth = 32;
  localparam int unsigned NumDirections = 5;

  // In total we have 16 snax inside each group
  // Each snax has 256kB memory 0x4_0000;
  // Starting address of Group0 is 0x1000_0000
  // We place it tightly as a 4x4 array
  localparam addr_t StartAddr = ClusterBasedAddr;
  localparam addr_t EndAddr = StartAddr + occamy_pkg::S1QuadrantAddressSpace;
  // Addr Map
  //+----------------+-------------+-------------+-------------+-------------+
  //|                | 1,4         | 2,4         | 3,4         | 4,4         |
  //|                | 0x1030_0000 | 0x1034_0000 | 0x1038_0000 | 0x103c_0000 |
  //|                | 0x1033_ffff | 0x1037_ffff | 0x103b_ffff | 0x103f_ffff |
  //+----------------+-------------+-------------+-------------+-------------+
  //|                | 1,3         | 2,3         | 3,3         | 4,3         |
  //|                | 0x1020_0000 | 0x1024_0000 | 0x1028_0000 | 0x102c_0000 |
  //|                | 0x1023_ffff | 0x1027_ffff | 0x102b_ffff | 0x102f_ffff |
  //+----------------+-------------+-------------+-------------+-------------+
  //|                | 1,2         | 2,2         | 3,2         | 4,2         |
  //|                | 0x1010_0000 | 0x1014_0000 | 0x1018_0000 | 0x101c_0000 |
  //|                | 0x1013_ffff | 0x1017_ffff | 0x101b_ffff | 0x101f_0000 |
  //+----------------+-------------+-------------+-------------+-------------+
  //|                | 1,1         | 2,1         | 3,1         | 4,1         |
  //|                | 0x1000_0000 | 0x1004_0000 | 0x1008_0000 | 0x100c_0000 |
  //|                | 0x1003_ffff | 0x1007_ffff | 0x100b_ffff | 0x100f_ffff |
  //+----------------+-------------+-------------+-------------+-------------+
  //| 0,0            |             |             |             |             |
  //| 0x10_0000_0000 |             |             |             |             |
  //| 0x10_3fff_ffff |             |             |             |             |
  //+----------------+-------------+-------------+-------------+-------------+

  localparam bit en_default_idx = 1'b1;
  localparam xy_id_t default_idx = '{x: '0, y: '0};

  /////////////////////
  //   AXI Signals   //
  /////////////////////

  floo_narrow_wide_pkg::axi_narrow_in_req_t   [NumX-1:0][NumY-1:0] narrow_man_req;
  floo_narrow_wide_pkg::axi_narrow_in_rsp_t  [NumX-1:0][NumY-1:0] narrow_man_rsp;
  floo_narrow_wide_pkg::axi_wide_in_req_t     [NumX-1:0][NumY-1:0] wide_man_req;
  floo_narrow_wide_pkg::axi_wide_in_rsp_t    [NumX-1:0][NumY-1:0] wide_man_rsp;

  floo_narrow_wide_pkg::axi_narrow_out_req_t  [NumX-1:0][NumY-1:0] narrow_sub_req;
  floo_narrow_wide_pkg::axi_narrow_out_rsp_t [NumX-1:0][NumY-1:0] narrow_sub_rsp;
  floo_narrow_wide_pkg::axi_wide_out_req_t    [NumX-1:0][NumY-1:0] wide_sub_req;
  floo_narrow_wide_pkg::axi_wide_out_rsp_t   [NumX-1:0][NumY-1:0] wide_sub_rsp;

  floo_narrow_wide_pkg::axi_wide_in_req_t     wide_noc_quadrant_s1_in_req;
  floo_narrow_wide_pkg::axi_wide_in_rsp_t     wide_noc_quadrant_s1_in_rsp;
  floo_narrow_wide_pkg::axi_wide_out_req_t    wide_noc_quadrant_s1_out_req;
  floo_narrow_wide_pkg::axi_wide_out_rsp_t    wide_noc_quadrant_s1_out_rsp;
  floo_narrow_wide_pkg::axi_narrow_in_req_t   narrow_noc_quadrant_s1_in_req;
  floo_narrow_wide_pkg::axi_narrow_in_rsp_t   narrow_noc_quadrant_s1_in_rsp;
  floo_narrow_wide_pkg::axi_narrow_out_req_t  narrow_noc_quadrant_s1_out_req;
  floo_narrow_wide_pkg::axi_narrow_out_rsp_t  narrow_noc_quadrant_s1_out_rsp;

  /////////////////////
  //   NoC Signals   //
  /////////////////////

  // NoC Signals for snax
  floo_narrow_wide_pkg::floo_req_t [NumX-1:0][NumY-1:0] narrow_chimney_man_req, narrow_chimney_sub_req;
  floo_narrow_wide_pkg::floo_rsp_t [NumX-1:0][NumY-1:0] narrow_chimney_man_rsp, narrow_chimney_sub_rsp;
  floo_narrow_wide_pkg::floo_wide_t       [NumX-1:0][NumY-1:0] wide_chimney_man, wide_chimney_sub;

  // NoC signals for top
  floo_narrow_wide_pkg::floo_req_t narrow_quad_man_req, narrow_quad_sub_req;
  floo_narrow_wide_pkg::floo_rsp_t narrow_quad_man_rsp, narrow_quad_sub_rsp;
  floo_narrow_wide_pkg::floo_wide_t wide_quad_man, wide_quad_sub;

  floo_narrow_wide_pkg::floo_req_t [NumX-1:0][NumY:0] req_hor_pos;
  floo_narrow_wide_pkg::floo_req_t [NumX-1:0][NumY:0] req_hor_neg;
  floo_narrow_wide_pkg::floo_req_t [NumY:0][NumX-1:0] req_ver_pos;
  floo_narrow_wide_pkg::floo_req_t [NumY:0][NumX-1:0] req_ver_neg;
  floo_narrow_wide_pkg::floo_rsp_t [NumX-1:0][NumY:0] rsp_hor_pos;
  floo_narrow_wide_pkg::floo_rsp_t [NumX-1:0][NumY:0] rsp_hor_neg;
  floo_narrow_wide_pkg::floo_rsp_t [NumY:0][NumX-1:0] rsp_ver_pos;
  floo_narrow_wide_pkg::floo_rsp_t [NumY:0][NumX-1:0] rsp_ver_neg;
  floo_narrow_wide_pkg::floo_wide_t       [NumX-1:0][NumY:0] wide_hor_pos;
  floo_narrow_wide_pkg::floo_wide_t       [NumX-1:0][NumY:0] wide_hor_neg;
  floo_narrow_wide_pkg::floo_wide_t       [NumY:0][NumX-1:0] wide_ver_pos;
  floo_narrow_wide_pkg::floo_wide_t       [NumY:0][NumX-1:0] wide_ver_neg;


  // NI for the top
  floo_narrow_wide_chimney #(
    .RouteAlgo                ( RouteAlgo               ),
    .XYAddrOffsetX            ( XYAddrOffsetX           ),
    .XYAddrOffsetY            ( XYAddrOffsetY           ),
    .XYIdOffsetX              ( 32'd1                   ),
    .XYIdOffsetY              ( 32'd1                   ),
    .XYIdWidthX               ( XYIdWidthX              ),
    .XYIdWidthY               ( XYIdWidthY              ),    
    .NarrowMaxTxns            ( NarrowMaxTxns           ),
    .WideMaxTxns              ( WideMaxTxns             ),
    .NarrowReorderBufferSize  ( NarrowReorderBufferSize ),
    .WideReorderBufferSize    ( WideReorderBufferSize   ),
    .CutAx                    ( CutAx                   ),
    .CutRsp                   ( CutRsp                  ),
    .id_t                     ( xy_id_t                 ),
    .axi_narrow_in_req_t      (floo_narrow_wide_pkg::axi_narrow_in_req_t),
    .axi_narrow_in_rsp_t      (floo_narrow_wide_pkg::axi_narrow_in_rsp_t),
    .axi_narrow_out_req_t     (floo_narrow_wide_pkg::axi_narrow_out_req_t),
    .axi_narrow_out_rsp_t     (floo_narrow_wide_pkg::axi_narrow_out_rsp_t),
    .axi_wide_in_req_t        (floo_narrow_wide_pkg::axi_wide_in_req_t),
    .axi_wide_in_rsp_t        (floo_narrow_wide_pkg::axi_wide_in_rsp_t),
    .axi_wide_out_req_t       (floo_narrow_wide_pkg::axi_wide_out_req_t),
    .axi_wide_out_rsp_t       (floo_narrow_wide_pkg::axi_wide_out_rsp_t),
    .floo_req_t               (floo_narrow_wide_pkg::floo_req_t),
    .floo_rsp_t               (floo_narrow_wide_pkg::floo_rsp_t),
    .floo_wide_t              (floo_narrow_wide_pkg::floo_wide_t)
  ) i_top_chimney(
    .clk_i                ( clk_quadrant        ),
    .rst_ni               ( rst_quadrant_n      ),
    .sram_cfg_i           ( '0                  ),
    .test_enable_i        ( 1'b0                ),
    .id_i                 ( default_idx         ),
    .en_default_idx_i     ( '0                  ),
    .default_idx_i        ( '0                  ),
    .id_map_i             ( '0                  ),
    .axi_narrow_in_req_i  ( narrow_noc_quadrant_s1_in_req  ),
    .axi_narrow_in_rsp_o  ( narrow_noc_quadrant_s1_in_rsp  ),
    .axi_narrow_out_req_o ( narrow_noc_quadrant_s1_out_req ),
    .axi_narrow_out_rsp_i ( narrow_noc_quadrant_s1_out_rsp ),
    .axi_wide_in_req_i    ( wide_noc_quadrant_s1_in_req    ),
    .axi_wide_in_rsp_o    ( wide_noc_quadrant_s1_in_rsp    ),
    .axi_wide_out_req_o   ( wide_noc_quadrant_s1_out_req   ),
    .axi_wide_out_rsp_i   ( wide_noc_quadrant_s1_out_rsp   ),
    .floo_req_i           ( narrow_quad_sub_req  ),
    .floo_req_o           ( narrow_quad_man_req  ),
    .floo_rsp_i           ( narrow_quad_man_rsp  ),
    .floo_rsp_o           ( narrow_quad_sub_rsp  ),
    .floo_wide_i          ( wide_quad_sub ),
    .floo_wide_o          ( wide_quad_man )
  );
  //////////////////
  //   NoC Mesh   //
  //////////////////

  for (genvar y = 0; y < (NumY + 1) ; y++) begin : gen_y
    for (genvar x = 0; x < (NumX + 1) ; x++) begin : gen_x
      xy_id_t current_id;
      floo_req_t [floo_pkg::NumDirections-1:0] req_out, req_in;
      floo_rsp_t [floo_pkg::NumDirections-1:0] rsp_out, rsp_in;
      floo_wide_t       [floo_pkg::NumDirections-1:0] wide_out, wide_in;
      assign current_id = '{x: x, y: y};
      if ( (x>=1) && (y>=1)) begin
        floo_narrow_wide_chimney #(
          .RouteAlgo                ( RouteAlgo               ),
          .XYAddrOffsetX            ( XYAddrOffsetX           ),
          .XYAddrOffsetY            ( XYAddrOffsetY           ),
          .StartAddr                ( StartAddr               ),
          .EndAddr                  ( EndAddr                 ),
          .XYIdOffsetX              ( 32'd1                   ),
          .XYIdOffsetY              ( 32'd1                   ),
          .XYIdWidthX               ( XYIdWidthX              ),
          .XYIdWidthY               ( XYIdWidthY              ),
          .NarrowMaxTxns            ( NarrowMaxTxns           ),
          .WideMaxTxns              ( WideMaxTxns             ),
          .NarrowReorderBufferSize  ( NarrowReorderBufferSize ),
          .WideReorderBufferSize    ( WideReorderBufferSize   ),
          .CutAx                    ( CutAx                   ),
          .CutRsp                   ( CutRsp                  ),
          .id_t                     ( xy_id_t                 ),
          .axi_narrow_in_req_t      ( floo_narrow_wide_pkg::axi_narrow_in_req_t     ),
          .axi_narrow_in_rsp_t      ( floo_narrow_wide_pkg::axi_narrow_in_rsp_t     ),
          .axi_narrow_out_req_t     ( floo_narrow_wide_pkg::axi_narrow_out_req_t    ),
          .axi_narrow_out_rsp_t     ( floo_narrow_wide_pkg::axi_narrow_out_rsp_t    ),
          .axi_wide_in_req_t        ( floo_narrow_wide_pkg::axi_wide_in_req_t       ),
          .axi_wide_in_rsp_t        ( floo_narrow_wide_pkg::axi_wide_in_rsp_t       ),
          .axi_wide_out_req_t       ( floo_narrow_wide_pkg::axi_wide_out_req_t      ),
          .axi_wide_out_rsp_t       ( floo_narrow_wide_pkg::axi_wide_out_rsp_t      ),
          .floo_req_t               ( floo_narrow_wide_pkg::floo_req_t              ),
          .floo_rsp_t               ( floo_narrow_wide_pkg::floo_rsp_t              ),
          .floo_wide_t              ( floo_narrow_wide_pkg::floo_wide_t             )
        ) i_cluster_chimney (
          .clk_i                ( clk_quadrant                  ),
          .rst_ni               ( rst_quadrant_n                ),
          .sram_cfg_i           ( '0                            ),
          .test_enable_i        ( 1'b0                          ),
          .id_i                 ( current_id                    ),
          .en_default_idx_i     ( en_default_idx                ),
          .default_idx_i        ( default_idx                   ),
          .id_map_i             ( '0                            ),
          .axi_narrow_in_req_i  ( narrow_man_req[x-1][y-1]          ),
          .axi_narrow_in_rsp_o  ( narrow_man_rsp[x-1][y-1]          ),
          .axi_narrow_out_req_o ( narrow_sub_req[x-1][y-1]          ),
          .axi_narrow_out_rsp_i ( narrow_sub_rsp[x-1][y-1]          ),
          .axi_wide_in_req_i    ( wide_man_req[x-1][y-1]            ),
          .axi_wide_in_rsp_o    ( wide_man_rsp[x-1][y-1]            ),
          .axi_wide_out_req_o   ( wide_sub_req[x-1][y-1]            ),
          .axi_wide_out_rsp_i   ( wide_sub_rsp[x-1][y-1]            ),
          .floo_req_i           ( narrow_chimney_sub_req[x-1][y-1]  ),
          .floo_req_o           ( narrow_chimney_man_req[x-1][y-1]  ),
          .floo_rsp_i           ( narrow_chimney_man_rsp[x-1][y-1]  ),
          .floo_rsp_o           ( narrow_chimney_sub_rsp[x-1][y-1]  ),
          .floo_wide_i          ( wide_chimney_sub[x-1][y-1]        ),
          .floo_wide_o          ( wide_chimney_man[x-1][y-1]        )
        );  
      end

      floo_narrow_wide_router #(
        .NumRoutes        ( NumDirections     ),
        .ChannelFifoDepth ( ChannelFifoDepth  ),
        .OutputFifoDepth  ( OutputFifoDepth   ),
        .RouteAlgo        ( RouteAlgo         ),
        .XYRouteOpt       ( 1'b0              ),
        .id_t             ( xy_id_t           )
      ) i_router (
        .clk_i          ( clk_quadrant   ),
        .rst_ni         ( rst_quadrant_n ),
        .test_enable_i  ( 1'b0           ),
        .id_i           ( current_id     ),
        .id_route_map_i ( '0             ),
        .floo_req_i     ( req_in         ),
        .floo_req_o     ( req_out        ),
        .floo_rsp_i     ( rsp_in         ),
        .floo_rsp_o     ( rsp_out        ),
        .floo_wide_i    ( wide_in        ),
        .floo_wide_o    ( wide_out       )
      );

      // Eject
      if ( (x==0) && (y==0) ) begin
        assign req_in[Eject] = narrow_quad_man_req;
        assign narrow_quad_sub_req = req_out[Eject];
        assign rsp_in[Eject] = narrow_quad_sub_rsp;
        assign narrow_quad_man_rsp = rsp_out[Eject];
        assign wide_in[Eject] = wide_quad_man;
        assign wide_quad_sub = wide_out[Eject];      
      end else if( (x>=1) && (y>=1) ) begin
        assign req_in[Eject] = narrow_chimney_man_req[x-1][y-1];
        assign narrow_chimney_sub_req[x-1][y-1] = req_out[Eject];
        assign rsp_in[Eject] = narrow_chimney_sub_rsp[x-1][y-1];
        assign narrow_chimney_man_rsp[x-1][y-1] = rsp_out[Eject];
        assign wide_in[Eject] = wide_chimney_man[x-1][y-1];
        assign wide_chimney_sub[x-1][y-1] = wide_out[Eject];
      end

      // East
      if (x==NumX) begin
        assign req_in[East] = '0;
        //assign req_hor_pos[x][y] = req_out[East];
        assign rsp_in[East] = '0;
        //assign rsp_hor_pos[x][y] = rsp_out[East];
        assign wide_in[East] = '0;
        //assign wide_hor_pos[x][y] = wide_out[East];
      end else begin
        assign req_in[East] = req_hor_neg[x][y];
        assign req_hor_pos[x][y] = req_out[East];
        assign rsp_in[East] = rsp_hor_neg[x][y];
        assign rsp_hor_pos[x][y] = rsp_out[East];
        assign wide_in[East] = wide_hor_neg[x][y];
        assign wide_hor_pos[x][y] = wide_out[East];        
      end

      // West
      if (x==0) begin
        assign req_in[West] = '0;
        //assign req_hor_neg[x][y] = req_out[West];
        assign rsp_in[West] = '0;
        //assign rsp_hor_neg[x][y] = rsp_out[West];
        assign wide_in[West] = '0;
        //assign wide_hor_neg[x][y] = wide_out[West];
      end else begin
        assign req_in[West] = req_hor_pos[x-1][y];
        assign req_hor_neg[x-1][y] = req_out[West];
        assign rsp_in[West] = rsp_hor_pos[x-1][y];
        assign rsp_hor_neg[x-1][y] = rsp_out[West];
        assign wide_in[West] = wide_hor_pos[x-1][y];
        assign wide_hor_neg[x-1][y] = wide_out[West];
      end

      // North
      if (y==NumY) begin
        assign req_in[North] = '0;
        //assign req_ver_pos[y+1][x] = req_out[North];
        assign rsp_in[North] = '0;
        //assign rsp_ver_pos[y+1][x] = rsp_out[North];
        assign wide_in[North] = '0;
        //assign wide_ver_pos[y+1][x] = wide_out[North];
      end else begin
        assign req_in[North] = req_ver_neg[x][y];
        assign req_ver_pos[x][y] = req_out[North];
        assign rsp_in[North] = rsp_ver_neg[x][y];
        assign rsp_ver_pos[x][y] = rsp_out[North];
        assign wide_in[North] = wide_ver_neg[x][y];
        assign wide_ver_pos[x][y] = wide_out[North];
      end


      // South
      if (y==0) begin  
        assign req_in[South] = '0;
        //assign req_ver_neg[y][x] = req_out[South];
        assign rsp_in[South] = '0;
        //assign rsp_ver_neg[y][x] = rsp_out[South];
        assign wide_in[South] = '0;
        //assign wide_ver_neg[y][x] = wide_out[South];
      end else begin
        assign req_in[South] = req_ver_pos[x][y-1];
        assign req_ver_neg[x][y-1] = req_out[South];
        assign rsp_in[South] = rsp_ver_pos[x][y-1];
        assign rsp_ver_neg[x][y-1] = rsp_out[South];
        assign wide_in[South] = wide_ver_pos[x][y-1];
        assign wide_ver_neg[x][y-1] = wide_out[South];
      end
    end
  end


  % else:
  ///////////////////
  //   CROSSBARS   //
  ///////////////////
      ${module}
  % endif
  

  ///////////////////////////////
  // Narrow In + IW Converter //
  ///////////////////////////////
  %if en_floonoc:
  axi_a48_d64_i7_u5_req_t narrow_cluster_in_ctrl_req;
  axi_a48_d64_i7_u5_resp_t narrow_cluster_in_ctrl_rsp;
  axi_a48_d64_i7_u5_req_t narrow_cluster_in_ctrl_cut_req;
  axi_a48_d64_i7_u5_resp_t narrow_cluster_in_ctrl_cut_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d64_i7_u5_aw_chan_t),
      .w_chan_t(axi_a48_d64_i7_u5_w_chan_t),
      .b_chan_t(axi_a48_d64_i7_u5_b_chan_t),
      .ar_chan_t(axi_a48_d64_i7_u5_ar_chan_t),
      .r_chan_t(axi_a48_d64_i7_u5_r_chan_t),
      .axi_req_t(axi_a48_d64_i7_u5_req_t),
      .axi_resp_t(axi_a48_d64_i7_u5_resp_t)
  ) i_narrow_cluster_in_ctrl_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_cluster_in_ctrl_req),
      .slv_resp_o(narrow_cluster_in_ctrl_rsp),
      .mst_req_o(narrow_cluster_in_ctrl_cut_req),
      .mst_resp_i(narrow_cluster_in_ctrl_cut_rsp)
  );

  axi_a48_d64_i7_u5_req_t  narrow_cluster_in_isolate_req;
  axi_a48_d64_i7_u5_resp_t narrow_cluster_in_isolate_rsp;

  axi_isolate #(
      .NumPending(32),
      .TerminateTransaction(1),
      .AtopSupport(1),
      .AxiIdWidth(7),
      .AxiAddrWidth(48),
      .AxiDataWidth(64),
      .AxiUserWidth(5),
      .axi_req_t(axi_a48_d64_i7_u5_req_t),
      .axi_resp_t(axi_a48_d64_i7_u5_resp_t)
  ) i_narrow_cluster_in_isolate (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(narrow_cluster_in_ctrl_cut_req),
      .slv_resp_o(narrow_cluster_in_ctrl_cut_rsp),
      .mst_req_o(narrow_cluster_in_isolate_req),
      .mst_resp_i(narrow_cluster_in_isolate_rsp),
      .isolate_i(isolate[0]),
      .isolated_o(isolated[0])
  );
  axi_id_remap #(
      .AxiSlvPortIdWidth(7),
      .AxiSlvPortMaxUniqIds(16),
      .AxiMaxTxnsPerId(4),
      .AxiMstPortIdWidth(4),
      .slv_req_t(axi_a48_d64_i7_u5_req_t),
      .slv_resp_t(axi_a48_d64_i7_u5_resp_t),
      .mst_req_t(axi_a48_d64_i4_u5_req_t),
      .mst_resp_t(axi_a48_d64_i4_u5_resp_t)
  ) i_narrow_cluster_in_iwc (
      .clk_i(clk_quadrant),
      .rst_ni(rst_quadrant_n),
      .slv_req_i(narrow_cluster_in_isolate_req),
      .slv_resp_o(narrow_cluster_in_isolate_rsp),
      .mst_req_o(narrow_noc_quadrant_s1_in_req),
      .mst_resp_i(narrow_noc_quadrant_s1_in_rsp)
  );
  %else:
  <%
    narrow_cluster_in_ctrl = soc_narrow_xbar.out_s1_quadrant_0 \
      .copy(name="narrow_cluster_in_ctrl") \
      .declare(context)
    narrow_cluster_in_ctrl \
      .cut(context, cuts_narrx_with_ctrl) \
      .isolate(context, "isolate[0]", "narrow_cluster_in_isolate", isolated="isolated[0]", terminated=True, to_clk="clk_quadrant", to_rst="rst_quadrant_n", num_pending=narrow_trans) \
      .change_iw(context, narrow_xbar_quadrant_s1.in_top.iw, "narrow_cluster_in_iwc", to=narrow_xbar_quadrant_s1.in_top)
  %>
  %endif


  /////////////////////////////////////
  // Narrow Out + TLB + IW Converter //
  /////////////////////////////////////
  %if en_floonoc:
  //Now we fix the parameters, TODO:resemble the solder style
  axi_a48_d64_i2_u5_req_t narrow_cluster_out_tlb_req;
  axi_a48_d64_i2_u5_resp_t narrow_cluster_out_tlb_rsp;
  axi_tlb_noreg #(
    .AxiSlvPortAddrWidth(48),
    .AxiMstPortAddrWidth(48),
    .AxiDataWidth(64),
    .AxiIdWidth(2),
    .AxiUserWidth (5),
    .AxiSlvPortMaxTxns(32),
    .L1NumEntries(8),
    .L1CutAx(1'b1),
    .slv_req_t(axi_a48_d64_i2_u5_req_t),
    .mst_req_t(axi_a48_d64_i2_u5_req_t),
    .axi_resp_t(axi_a48_d64_i2_u5_resp_t),
    .entry_t(tlb_entry_t)
  ) i_narrow_cluster_out_tlb (
    .clk_i (clk_quadrant),
    .rst_ni (rst_quadrant_n),
    .test_en_i(test_mode_i),
    .slv_req_i (narrow_noc_quadrant_s1_out_req),
    .slv_resp_o (narrow_noc_quadrant_s1_out_rsp),
    .mst_req_o (narrow_cluster_out_tlb_req),
    .mst_resp_i (narrow_cluster_out_tlb_rsp),
    .entries_i (narrow_tlb_entries),
    .bypass_i (~narrow_tlb_enable)
  );

  axi_a48_d64_i4_u5_req_t narrow_cluster_out_iwc_req;
  axi_a48_d64_i4_u5_resp_t narrow_cluster_out_iwc_rsp;

  typedef logic [1:0] i_narrow_cluster_out_iwc_pre_id_t;
  axi_id_prepend #(
    .slv_aw_chan_t  ( axi_a48_d64_i2_u5_aw_chan_t ),
    .slv_w_chan_t   ( axi_a48_d64_i2_u5_w_chan_t ),
    .slv_b_chan_t   ( axi_a48_d64_i2_u5_b_chan_t ),
    .slv_ar_chan_t  ( axi_a48_d64_i2_u5_ar_chan_t ),
    .slv_r_chan_t   ( axi_a48_d64_i2_u5_r_chan_t ),
    .mst_aw_chan_t  ( axi_a48_d64_i4_u5_aw_chan_t ),
    .mst_w_chan_t   ( axi_a48_d64_i4_u5_w_chan_t ),
    .mst_b_chan_t   ( axi_a48_d64_i4_u5_b_chan_t ),
    .mst_ar_chan_t  ( axi_a48_d64_i4_u5_ar_chan_t ),
    .mst_r_chan_t   ( axi_a48_d64_i4_u5_r_chan_t ),
    .NoBus          ( 1 ),
    .AxiIdWidthSlvPort ( 2 ),
    .AxiIdWidthMstPort ( 4 )
  ) i_narrow_cluster_out_iwc (
    .pre_id_i           (i_narrow_cluster_out_iwc_pre_id_t'(0)),
    .slv_aw_chans_i     (narrow_cluster_out_tlb_req.aw),
    .slv_aw_valids_i    (narrow_cluster_out_tlb_req.aw_valid),
    .slv_aw_readies_o   (narrow_cluster_out_tlb_rsp.aw_ready),
    .slv_w_chans_i      (narrow_cluster_out_tlb_req.w),
    .slv_w_valids_i     (narrow_cluster_out_tlb_req.w_valid),
    .slv_w_readies_o    (narrow_cluster_out_tlb_rsp.w_ready),
    .slv_b_chans_o      (narrow_cluster_out_tlb_rsp.b),
    .slv_b_valids_o     (narrow_cluster_out_tlb_rsp.b_valid),
    .slv_b_readies_i    (narrow_cluster_out_tlb_req.b_ready),
    .slv_ar_chans_i     (narrow_cluster_out_tlb_req.ar),
    .slv_ar_valids_i    (narrow_cluster_out_tlb_req.ar_valid),
    .slv_ar_readies_o   (narrow_cluster_out_tlb_rsp.ar_ready),
    .slv_r_chans_o      (narrow_cluster_out_tlb_rsp.r),
    .slv_r_valids_o     (narrow_cluster_out_tlb_rsp.r_valid),
    .slv_r_readies_i    (narrow_cluster_out_tlb_req.r_ready),
    .mst_aw_chans_o     (narrow_cluster_out_iwc_req.aw),
    .mst_aw_valids_o    (narrow_cluster_out_iwc_req.aw_valid),
    .mst_aw_readies_i   (narrow_cluster_out_iwc_rsp.aw_ready),
    .mst_w_chans_o      (narrow_cluster_out_iwc_req.w),
    .mst_w_valids_o     (narrow_cluster_out_iwc_req.w_valid),
    .mst_w_readies_i    (narrow_cluster_out_iwc_rsp.w_ready),
    .mst_b_chans_i      (narrow_cluster_out_iwc_rsp.b),
    .mst_b_valids_i     (narrow_cluster_out_iwc_rsp.b_valid),
    .mst_b_readies_o    (narrow_cluster_out_iwc_req.b_ready),
    .mst_ar_chans_o     (narrow_cluster_out_iwc_req.ar),
    .mst_ar_valids_o    (narrow_cluster_out_iwc_req.ar_valid),
    .mst_ar_readies_i   (narrow_cluster_out_iwc_rsp.ar_ready),
    .mst_r_chans_i      (narrow_cluster_out_iwc_rsp.r),
    .mst_r_valids_i     (narrow_cluster_out_iwc_rsp.r_valid),
    .mst_r_readies_o    (narrow_cluster_out_iwc_req.r_ready)
  );


  axi_a48_d64_i4_u5_req_t narrow_cluster_out_isolate_req;
  axi_a48_d64_i4_u5_resp_t narrow_cluster_out_isolate_rsp;

  axi_isolate #(
    .NumPending ( 32 ),
    .TerminateTransaction ( 0 ),
    .AtopSupport ( 1 ),
    .AxiIdWidth ( 4 ),
    .AxiAddrWidth ( 48 ),
    .AxiDataWidth ( 64 ),
    .AxiUserWidth ( 5 ),
    .axi_req_t ( axi_a48_d64_i4_u5_req_t ),
    .axi_resp_t ( axi_a48_d64_i4_u5_resp_t )
  ) i_narrow_cluster_out_isolate (
    .clk_i ( clk_i ),
    .rst_ni ( rst_ni ),
    .slv_req_i ( narrow_cluster_out_iwc_req ),
    .slv_resp_o ( narrow_cluster_out_iwc_rsp ),
    .mst_req_o ( narrow_cluster_out_isolate_req ),
    .mst_resp_i ( narrow_cluster_out_isolate_rsp ),
    .isolate_i ( isolate[1] ),
    .isolated_o ( isolated[1] )
  );

  axi_a48_d64_i4_u5_req_t narrow_cluster_out_ctrl_req;
  axi_a48_d64_i4_u5_resp_t narrow_cluster_out_ctrl_rsp;

  axi_multicut #(
    .NoCuts (1),
    .aw_chan_t (axi_a48_d64_i4_u5_aw_chan_t),
    .w_chan_t (axi_a48_d64_i4_u5_w_chan_t),
    .b_chan_t (axi_a48_d64_i4_u5_b_chan_t),
    .ar_chan_t (axi_a48_d64_i4_u5_ar_chan_t),
    .r_chan_t (axi_a48_d64_i4_u5_r_chan_t),
    .axi_req_t (axi_a48_d64_i4_u5_req_t),
    .axi_resp_t (axi_a48_d64_i4_u5_resp_t)
  ) i_narrow_cluster_out_ctrl (
    .clk_i (clk_i),
    .rst_ni (rst_ni),
    .slv_req_i (narrow_cluster_out_isolate_req),
    .slv_resp_o (narrow_cluster_out_isolate_rsp),
    .mst_req_o (narrow_cluster_out_ctrl_req),
    .mst_resp_i (narrow_cluster_out_ctrl_rsp)
  );
  %else:
  <%
  #// Xbar Narrow Out
  #// Add TLB behind crossbar if enabled
  if narrow_tlb_cfg:
    narrow_cluster_out_tlb = narrow_xbar_quadrant_s1.out_top \
    .add_tlb_no_reg(context, "narrow_cluster_out_tlb", \
      cfg=narrow_tlb_cfg, \
      entry_t="tlb_entry_t", \
      entries="narrow_tlb_entries", \
      bypass="~narrow_tlb_enable")
  else:
    narrow_cluster_out_tlb = narrow_xbar_quadrant_s1.out_top
  #// Change ID width, isolate, and cut
  narrow_cluster_out_ctrl = narrow_cluster_out_tlb \
    .change_iw(context, soc_narrow_xbar.in_s1_quadrant_0.iw, "narrow_cluster_out_iwc") \
    .isolate(context, "isolate[1]", "narrow_cluster_out_isolate", isolated="isolated[1]", to_clk="clk_i", to_rst="rst_ni", use_to_clk_rst=True, num_pending=narrow_trans) \
    .cut(context, cuts_narrx_with_ctrl, "narrow_cluster_out_ctrl")
  %>
  %endif


  /////////////////////////////////////////
  // Wide Out + RO Cache + IW Converter  //
  /////////////////////////////////////////
  %if en_floonoc:
  axi_a48_d512_i1_u0_req_t wide_cluster_out_tlb_req;
  axi_a48_d512_i1_u0_resp_t wide_cluster_out_tlb_rsp;
  axi_tlb_noreg #(
    .AxiSlvPortAddrWidth(48),
    .AxiMstPortAddrWidth(48),
    .AxiDataWidth(512),
    .AxiIdWidth(1),
    .AxiUserWidth (1),
    .AxiSlvPortMaxTxns(32),
    .L1NumEntries(8),
    .L1CutAx(1'b1),
    .slv_req_t(axi_a48_d512_i1_u0_req_t),
    .mst_req_t(axi_a48_d512_i1_u0_req_t),
    .axi_resp_t(axi_a48_d512_i1_u0_resp_t),
    .entry_t(tlb_entry_t)
  ) i_wide_cluster_out_tlb (
    .clk_i (clk_quadrant),
    .rst_ni (rst_quadrant_n),
    .test_en_i(test_mode_i),
    .slv_req_i (wide_noc_quadrant_s1_out_req),
    .slv_resp_o (wide_noc_quadrant_s1_out_rsp),
    .mst_req_o (wide_cluster_out_tlb_req),
    .mst_resp_i (wide_cluster_out_tlb_rsp),
    .entries_i (wide_tlb_entries),
    .bypass_i (~wide_tlb_enable)
  );

  axi_a48_d512_i2_u0_req_t snitch_ro_cache_req;
  axi_a48_d512_i2_u0_resp_t snitch_ro_cache_rsp;

  snitch_read_only_cache #(
    .LineWidth (1024),
    .LineCount (128),
    .SetCount (2),
    .AxiAddrWidth (48),
    .AxiDataWidth (512),
    .AxiIdWidth (1),
    .AxiUserWidth (1),
    .MaxTrans (32),
    .NrAddrRules (4),
    .slv_req_t (axi_a48_d512_i1_u0_req_t),
    .slv_rsp_t (axi_a48_d512_i1_u0_resp_t),
    .mst_req_t (axi_a48_d512_i2_u0_req_t),
    .mst_rsp_t (axi_a48_d512_i2_u0_resp_t),
    .sram_cfg_data_t (sram_cfg_t),
    .sram_cfg_tag_t (sram_cfg_t)
  ) i_snitch_ro_cache (
    .clk_i (clk_quadrant),
    .rst_ni (rst_quadrant_n),
    .enable_i (ro_enable),
    .flush_valid_i (ro_flush_valid),
    .flush_ready_o (ro_flush_ready),
    .start_addr_i (ro_start_addr),
    .end_addr_i (ro_end_addr),
    .axi_slv_req_i (wide_cluster_out_tlb_req),
    .axi_slv_rsp_o (wide_cluster_out_tlb_rsp),
    .axi_mst_req_o (snitch_ro_cache_req),
    .axi_mst_rsp_i (snitch_ro_cache_rsp),
    .sram_cfg_data_i (sram_cfg_i.rocache_data),
    .sram_cfg_tag_i (sram_cfg_i.rocache_tag)
  );

  axi_a48_d512_i2_u0_req_t snitch_ro_cache_cut_req;
  axi_a48_d512_i2_u0_resp_t snitch_ro_cache_cut_rsp;

  axi_multicut #(
    .NoCuts (1),
    .aw_chan_t (axi_a48_d512_i2_u0_aw_chan_t),
    .w_chan_t (axi_a48_d512_i2_u0_w_chan_t),
    .b_chan_t (axi_a48_d512_i2_u0_b_chan_t),
    .ar_chan_t (axi_a48_d512_i2_u0_ar_chan_t),
    .r_chan_t (axi_a48_d512_i2_u0_r_chan_t),
    .axi_req_t (axi_a48_d512_i2_u0_req_t),
    .axi_resp_t (axi_a48_d512_i2_u0_resp_t)
  ) i_snitch_ro_cache_cut (
    .clk_i (clk_quadrant),
    .rst_ni (rst_quadrant_n),
    .slv_req_i (snitch_ro_cache_req),
    .slv_resp_o (snitch_ro_cache_rsp),
    .mst_req_o (snitch_ro_cache_cut_req),
    .mst_resp_i (snitch_ro_cache_cut_rsp)
  );

  axi_a48_d512_i4_u0_req_t wide_cluster_out_iwc_req;
  axi_a48_d512_i4_u0_resp_t wide_cluster_out_iwc_rsp;
  typedef logic [1:0] i_wide_cluster_out_iwc_pre_id_t;
  axi_id_prepend #(
    .slv_aw_chan_t  ( axi_a48_d512_i2_u0_aw_chan_t ),
    .slv_w_chan_t   ( axi_a48_d512_i2_u0_w_chan_t ),
    .slv_b_chan_t   ( axi_a48_d512_i2_u0_b_chan_t ),
    .slv_ar_chan_t  ( axi_a48_d512_i2_u0_ar_chan_t ),
    .slv_r_chan_t   ( axi_a48_d512_i2_u0_r_chan_t ),
    .mst_aw_chan_t  ( axi_a48_d512_i4_u0_aw_chan_t ),
    .mst_w_chan_t   ( axi_a48_d512_i4_u0_w_chan_t ),
    .mst_b_chan_t   ( axi_a48_d512_i4_u0_b_chan_t ),
    .mst_ar_chan_t  ( axi_a48_d512_i4_u0_ar_chan_t ),
    .mst_r_chan_t   ( axi_a48_d512_i4_u0_r_chan_t ),
    .NoBus          ( 1 ),
    .AxiIdWidthSlvPort ( 2 ),
    .AxiIdWidthMstPort ( 4 )
  ) i_wide_cluster_out_iwc (
    .pre_id_i           (i_wide_cluster_out_iwc_pre_id_t'(0)),
    .slv_aw_chans_i     (snitch_ro_cache_cut_req.aw),
    .slv_aw_valids_i    (snitch_ro_cache_cut_req.aw_valid),
    .slv_aw_readies_o   (snitch_ro_cache_cut_rsp.aw_ready),
    .slv_w_chans_i      (snitch_ro_cache_cut_req.w),
    .slv_w_valids_i     (snitch_ro_cache_cut_req.w_valid),
    .slv_w_readies_o    (snitch_ro_cache_cut_rsp.w_ready),
    .slv_b_chans_o      (snitch_ro_cache_cut_rsp.b),
    .slv_b_valids_o     (snitch_ro_cache_cut_rsp.b_valid),
    .slv_b_readies_i    (snitch_ro_cache_cut_req.b_ready),
    .slv_ar_chans_i     (snitch_ro_cache_cut_req.ar),
    .slv_ar_valids_i    (snitch_ro_cache_cut_req.ar_valid),
    .slv_ar_readies_o   (snitch_ro_cache_cut_rsp.ar_ready),
    .slv_r_chans_o      (snitch_ro_cache_cut_rsp.r),
    .slv_r_valids_o     (snitch_ro_cache_cut_rsp.r_valid),
    .slv_r_readies_i    (snitch_ro_cache_cut_req.r_ready),
    .mst_aw_chans_o     (wide_cluster_out_iwc_req.aw),
    .mst_aw_valids_o    (wide_cluster_out_iwc_req.aw_valid),
    .mst_aw_readies_i   (wide_cluster_out_iwc_rsp.aw_ready),
    .mst_w_chans_o      (wide_cluster_out_iwc_req.w),
    .mst_w_valids_o     (wide_cluster_out_iwc_req.w_valid),
    .mst_w_readies_i    (wide_cluster_out_iwc_rsp.w_ready),
    .mst_b_chans_i      (wide_cluster_out_iwc_rsp.b),
    .mst_b_valids_i     (wide_cluster_out_iwc_rsp.b_valid),
    .mst_b_readies_o    (wide_cluster_out_iwc_req.b_ready),
    .mst_ar_chans_o     (wide_cluster_out_iwc_req.ar),
    .mst_ar_valids_o    (wide_cluster_out_iwc_req.ar_valid),
    .mst_ar_readies_i   (wide_cluster_out_iwc_rsp.ar_ready),
    .mst_r_chans_i      (wide_cluster_out_iwc_rsp.r),
    .mst_r_valids_i     (wide_cluster_out_iwc_rsp.r_valid),
    .mst_r_readies_o    (wide_cluster_out_iwc_req.r_ready)
  );


  axi_a48_d512_i4_u0_req_t wide_cluster_out_isolate_req;
  axi_a48_d512_i4_u0_resp_t wide_cluster_out_isolate_rsp;

  axi_isolate #(
    .NumPending ( 32 ),
    .TerminateTransaction ( 0 ),
    .AtopSupport ( 0 ),
    .AxiIdWidth ( 4 ),
    .AxiAddrWidth ( 48 ),
    .AxiDataWidth ( 512 ),
    .AxiUserWidth ( 1 ),
    .axi_req_t ( axi_a48_d512_i4_u0_req_t ),
    .axi_resp_t ( axi_a48_d512_i4_u0_resp_t )
  ) i_wide_cluster_out_isolate (
    .clk_i ( clk_i ),
    .rst_ni ( rst_ni ),
    .slv_req_i ( wide_cluster_out_iwc_req ),
    .slv_resp_o ( wide_cluster_out_iwc_rsp),
    .mst_req_o ( wide_cluster_out_isolate_req ),
    .mst_resp_i ( wide_cluster_out_isolate_rsp ),
    .isolate_i ( isolate[3] ),
    .isolated_o ( isolated[3] )
  );
  axi_a48_d512_i4_u0_req_t wide_cluster_out_isolate_cut_req;
  axi_a48_d512_i4_u0_resp_t wide_cluster_out_isolate_cut_rsp;

  axi_multicut #(
    .NoCuts (1),
    .aw_chan_t (axi_a48_d512_i4_u0_aw_chan_t),
    .w_chan_t (axi_a48_d512_i4_u0_w_chan_t),
    .b_chan_t (axi_a48_d512_i4_u0_b_chan_t),
    .ar_chan_t (axi_a48_d512_i4_u0_ar_chan_t),
    .r_chan_t (axi_a48_d512_i4_u0_r_chan_t),
    .axi_req_t (axi_a48_d512_i4_u0_req_t),
    .axi_resp_t (axi_a48_d512_i4_u0_resp_t)
  ) i_wide_cluster_out_isolate_cut (
    .clk_i (clk_i),
    .rst_ni (rst_ni),
    .slv_req_i (wide_cluster_out_isolate_req),
    .slv_resp_o (wide_cluster_out_isolate_rsp),
    .mst_req_o (wide_cluster_out_isolate_cut_req),
    .mst_resp_i (wide_cluster_out_isolate_cut_rsp)
  );

  assign quadrant_wide_out_req_o = wide_cluster_out_isolate_cut_req;
  assign wide_cluster_out_isolate_cut_rsp = quadrant_wide_out_rsp_i;
  %else:
  <%
    #// Generate the Xbar Wide Out
    wide_target_iw = 3
    #// Add TLB behind crossbar if enabled
    if wide_tlb_cfg:
      wide_cluster_out_tlb = wide_xbar_quadrant_s1.out_top \
      .add_tlb_no_reg(context, "wide_cluster_out_tlb", \
        cfg=wide_tlb_cfg, \
      entry_t="tlb_entry_t", \
      entries="wide_tlb_entries", \
      bypass="~wide_tlb_enable")
    else:
      wide_cluster_out_tlb = wide_xbar_quadrant_s1.out_top
    #// Add RO cache behind TLB if enabled
    if ro_cache_cfg:
      wide_target_iw += 1
      wide_cluster_out_ro_cache = wide_cluster_out_tlb \
      .add_ro_cache(context, "snitch_ro_cache", \
        ro_cache_cfg, \
        enable="ro_enable", \
        flush_valid="ro_flush_valid", \
        flush_ready="ro_flush_ready", \
        start_addr="ro_start_addr", \
        end_addr="ro_end_addr", \
        sram_cfg_data_t="sram_cfg_t", \
        sram_cfg_tag_t="sram_cfg_t", \
        sram_cfg_data_i="sram_cfg_i.rocache_data", \
        sram_cfg_tag_i="sram_cfg_i.rocache_tag")
    else:
      wide_cluster_out_ro_cache = wide_cluster_out_tlb
    #// Add another multicut as configured before IWC
    wide_cluster_out_ro_cache = wide_cluster_out_ro_cache.cut(context, cuts_widexpost_with_wideiwc_out)
    #// Change ID width, isolate, and cut
    wide_cluster_out_cut = wide_cluster_out_ro_cache \
      .change_iw(context, wide_target_iw, "wide_cluster_out_iwc", max_txns_per_id=wide_trans) \
      .isolate(context, "isolate[3]", "wide_cluster_out_isolate", isolated="isolated[3]", atop_support=False, to_clk="clk_i", to_rst="rst_ni", use_to_clk_rst=True, num_pending=wide_trans) \
      .cut(context, cuts_wideiwc_with_wideout)
    #// Assert correct outgoing ID widths
    assert quadrant_pre_xbars[0].in_quadrant.iw == wide_cluster_out_cut.iw, "S1 Quadrant and SoC IW mismatches."
  %>
    assign quadrant_wide_out_req_o = ${wide_cluster_out_cut.req_name()};
  assign ${wide_cluster_out_cut.rsp_name()} = quadrant_wide_out_rsp_i;
  %endif




  ////////////////////////////
  // Wide In + IW Converter //
  ////////////////////////////
  %if en_floonoc:
  axi_a48_d512_i5_u0_req_t  wide_cluster_in_iwc_req;
  axi_a48_d512_i5_u0_resp_t wide_cluster_in_iwc_rsp;

  axi_a48_d512_i5_u0_req_t  wide_cluster_in_iwc_cut_req;
  axi_a48_d512_i5_u0_resp_t wide_cluster_in_iwc_cut_rsp;
  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i5_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i5_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i5_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i5_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i5_u0_r_chan_t),
      .axi_req_t(axi_a48_d512_i5_u0_req_t),
      .axi_resp_t(axi_a48_d512_i5_u0_resp_t)
  ) i_wide_cluster_in_iwc_cut (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_cluster_in_iwc_req),
      .slv_resp_o(wide_cluster_in_iwc_rsp),
      .mst_req_o(wide_cluster_in_iwc_cut_req),
      .mst_resp_i(wide_cluster_in_iwc_cut_rsp)
  );
  axi_a48_d512_i5_u0_req_t  wide_cluster_in_isolate_req;
  axi_a48_d512_i5_u0_resp_t wide_cluster_in_isolate_rsp;

  axi_isolate #(
      .NumPending(32),
      .TerminateTransaction(1),
      .AtopSupport(0),
      .AxiIdWidth(5),
      .AxiAddrWidth(48),
      .AxiDataWidth(512),
      .AxiUserWidth(1),
      .axi_req_t(axi_a48_d512_i5_u0_req_t),
      .axi_resp_t(axi_a48_d512_i5_u0_resp_t)
  ) i_wide_cluster_in_isolate (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(wide_cluster_in_iwc_cut_req),
      .slv_resp_o(wide_cluster_in_iwc_cut_rsp),
      .mst_req_o(wide_cluster_in_isolate_req),
      .mst_resp_i(wide_cluster_in_isolate_rsp),
      .isolate_i(isolate[2]),
      .isolated_o(isolated[2])
  );
  axi_a48_d512_i5_u0_req_t  wide_cluster_in_isolate_cut_req;
  axi_a48_d512_i5_u0_resp_t wide_cluster_in_isolate_cut_rsp;

  axi_multicut #(
      .NoCuts(1),
      .aw_chan_t(axi_a48_d512_i5_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i5_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i5_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i5_u0_ar_chan_t),
      .r_chan_t(axi_a48_d512_i5_u0_r_chan_t),
      .axi_req_t(axi_a48_d512_i5_u0_req_t),
      .axi_resp_t(axi_a48_d512_i5_u0_resp_t)
  ) i_wide_cluster_in_isolate_cut (
      .clk_i(clk_quadrant),
      .rst_ni(rst_quadrant_n),
      .slv_req_i(wide_cluster_in_isolate_req),
      .slv_resp_o(wide_cluster_in_isolate_rsp),
      .mst_req_o(wide_cluster_in_isolate_cut_req),
      .mst_resp_i(wide_cluster_in_isolate_cut_rsp)
  );
  axi_id_remap #(
      .AxiSlvPortIdWidth(5),
      .AxiSlvPortMaxUniqIds(8),
      .AxiMaxTxnsPerId(32),
      .AxiMstPortIdWidth(3),
      .slv_req_t(axi_a48_d512_i5_u0_req_t),
      .slv_resp_t(axi_a48_d512_i5_u0_resp_t),
      .mst_req_t(axi_a48_d512_i3_u0_req_t),
      .mst_resp_t(axi_a48_d512_i3_u0_resp_t)
  ) i_wide_cluster_in_iwc (
      .clk_i(clk_quadrant),
      .rst_ni(rst_quadrant_n),
      .slv_req_i(wide_cluster_in_isolate_cut_req),
      .slv_resp_o(wide_cluster_in_isolate_cut_rsp),
      .mst_req_o(wide_noc_quadrant_s1_in_req),
      .mst_resp_i(wide_noc_quadrant_s1_in_rsp)
  );
  assign wide_cluster_in_iwc_req = quadrant_wide_in_req_i;
  assign quadrant_wide_in_rsp_o  = wide_cluster_in_iwc_rsp;        
  %else:
  <%
    quadrant_inter_xbar.out_quadrant_0 \
      .copy(name="wide_cluster_in_iwc") \
      .declare(context) \
      .cut(context, cuts_wideiwc_with_wideout) \
      .isolate(context, "isolate[2]", "wide_cluster_in_isolate", isolated="isolated[2]", terminated=True, atop_support=False, to_clk="clk_quadrant", to_rst="rst_quadrant_n", num_pending=wide_trans) \
      .cut(context, cuts_wideisolate_with_wideiwc_in) \
      .change_iw(context, wide_xbar_quadrant_s1.in_top.iw, "wide_cluster_in_iwc", to=wide_xbar_quadrant_s1.in_top)
  %>
  assign wide_cluster_in_iwc_req = quadrant_wide_in_req_i;
  assign quadrant_wide_in_rsp_o = wide_cluster_in_iwc_rsp;
  %endif


  /////////////////////////
  // Quadrant Controller //
  /////////////////////////
  %if en_floonoc:
  ${name}_quadrant_s1_ctrl #(
    .tlb_entry_t (tlb_entry_t)
  ) i_${name}_quadrant_s1_ctrl (
    .clk_i,
    .rst_ni,
    .test_mode_i,
    .tile_id_i,
    .clk_quadrant_o (clk_quadrant),
    .rst_quadrant_no (rst_quadrant_n),
    .isolate_o (isolate),
    .isolated_i (isolated),
    .ro_enable_o (ro_enable),
    .ro_flush_valid_o (ro_flush_valid),
    .ro_flush_ready_i  (ro_flush_ready),
    .ro_start_addr_o (ro_start_addr),
    .ro_end_addr_o (ro_end_addr),
    .soc_out_req_o (quadrant_narrow_out_req_o),
    .soc_out_rsp_i (quadrant_narrow_out_rsp_i),
    .soc_in_req_i (quadrant_narrow_in_req_i),
    .soc_in_rsp_o (quadrant_narrow_in_rsp_o),
    %if narrow_tlb_cfg:
    .narrow_tlb_entries_o (narrow_tlb_entries),
    .narrow_tlb_enable_o (narrow_tlb_enable),
    %endif
    %if wide_tlb_cfg:
    .wide_tlb_entries_o (wide_tlb_entries),
    .wide_tlb_enable_o (wide_tlb_enable),
    %endif
    .quadrant_out_req_o(narrow_cluster_in_ctrl_req),
    .quadrant_out_rsp_i(narrow_cluster_in_ctrl_rsp),
    .quadrant_in_req_i(narrow_cluster_out_ctrl_req),
    .quadrant_in_rsp_o(narrow_cluster_out_ctrl_rsp)
  );

  %else:
  ${name}_quadrant_s1_ctrl #(
    .tlb_entry_t (tlb_entry_t)
  ) i_${name}_quadrant_s1_ctrl (
    .clk_i,
    .rst_ni,
    .test_mode_i,
    .tile_id_i,
    .clk_quadrant_o (clk_quadrant),
    .rst_quadrant_no (rst_quadrant_n),
    .isolate_o (isolate),
    .isolated_i (isolated),
    .ro_enable_o (ro_enable),
    .ro_flush_valid_o (ro_flush_valid),
    .ro_flush_ready_i  (ro_flush_ready),
    .ro_start_addr_o (ro_start_addr),
    .ro_end_addr_o (ro_end_addr),
    .soc_out_req_o (quadrant_narrow_out_req_o),
    .soc_out_rsp_i (quadrant_narrow_out_rsp_i),
    .soc_in_req_i (quadrant_narrow_in_req_i),
    .soc_in_rsp_o (quadrant_narrow_in_rsp_o),
    %if narrow_tlb_cfg:
    .narrow_tlb_entries_o (narrow_tlb_entries),
    .narrow_tlb_enable_o (narrow_tlb_enable),
    %endif
    %if wide_tlb_cfg:
    .wide_tlb_entries_o (wide_tlb_entries),
    .wide_tlb_enable_o (wide_tlb_enable),
    %endif
    .quadrant_out_req_o (${narrow_cluster_in_ctrl.req_name()}),
    .quadrant_out_rsp_i (${narrow_cluster_in_ctrl.rsp_name()}),
    .quadrant_in_req_i (${narrow_cluster_out_ctrl.req_name()}),
    .quadrant_in_rsp_o (${narrow_cluster_out_ctrl.rsp_name()})
  );

  %endif

% for i in range(nr_clusters):
    <% 
    x = i % x_num
    y = i // x_num
    %>
  ///////////////
  // Cluster ${i} //
  ///////////////
  %if en_floonoc:

  logic [9:0] hart_base_id_${i};
  assign hart_base_id_${i} = HartIdOffset + tile_id_i * NrCoresS1Quadrant + ${i} * NrCoresCluster;
  
  ${name}_cluster_wrapper i_${name}_cluster_${i} (
    .clk_i (clk_quadrant),
    .rst_ni (rst_quadrant_n),
    .meip_i (meip_i[${i}*NrCoresCluster+:NrCoresCluster]),
    .mtip_i (mtip_i[${i}*NrCoresCluster+:NrCoresCluster]),
    .msip_i (msip_i[${i}*NrCoresCluster+:NrCoresCluster]),
    .hart_base_id_i (hart_base_id_${i}),
    .cluster_base_addr_i (cluster_base_addr[${i}]),
    .narrow_in_req_i (narrow_sub_req[${x}][${y}]),
    .narrow_in_resp_o (narrow_sub_rsp[${x}][${y}]),
    .narrow_out_req_o  (narrow_man_req[${x}][${y}]),
    .narrow_out_resp_i (narrow_man_rsp[${x}][${y}]),
    .wide_out_req_o  (wide_man_req[${x}][${y}]),
    .wide_out_resp_i (wide_man_rsp[${x}][${y}]),
    .wide_in_req_i (wide_sub_req[${x}][${y}]),
    .wide_in_resp_o (wide_sub_rsp[${x}][${y}]),
    .sram_cfgs_i (sram_cfg_i.cluster)
  );    
  %else:
  <%
    narrow_cluster_in = narrow_xbar_quadrant_s1.__dict__["out_cluster_{}".format(i)].change_iw(context, cfg["cluster"]["id_width_in"], "narrow_in_iwc_{}".format(i)).cut(context, cuts_narrx_with_cluster)
    narrow_cluster_out = narrow_xbar_quadrant_s1.__dict__["in_cluster_{}".format(i)].copy(name="narrow_out_{}".format(i)).declare(context)
    narrow_cluster_out.cut(context, cuts_narrx_with_cluster, to=narrow_xbar_quadrant_s1.__dict__["in_cluster_{}".format(i)])
    wide_cluster_in = wide_xbar_quadrant_s1.__dict__["out_cluster_{}".format(i)].change_iw(context, cfg["cluster"]["dma_id_width_in"], "wide_in_iwc_{}".format(i), max_txns_per_id=wide_trans).cut(context, cuts_widex_with_cluster)
    wide_cluster_out = wide_xbar_quadrant_s1.__dict__["in_cluster_{}".format(i)].copy(name="wide_out_{}".format(i)).declare(context)
    wide_cluster_out.cut(context, cuts_widex_with_cluster, to=wide_xbar_quadrant_s1.__dict__["in_cluster_{}".format(i)])
  %>
  


  logic [9:0] hart_base_id_${i};
  assign hart_base_id_${i} = HartIdOffset + tile_id_i * NrCoresS1Quadrant + ${i} * NrCoresCluster;

  ${name}_cluster_wrapper i_${name}_cluster_${i} (
    .clk_i (clk_quadrant),
    .rst_ni (rst_quadrant_n),
    .meip_i (meip_i[${i}*NrCoresCluster+:NrCoresCluster]),
    .mtip_i (mtip_i[${i}*NrCoresCluster+:NrCoresCluster]),
    .msip_i (msip_i[${i}*NrCoresCluster+:NrCoresCluster]),
    .hart_base_id_i (hart_base_id_${i}),
    .cluster_base_addr_i (cluster_base_addr[${i}]),
    .narrow_in_req_i (${narrow_cluster_in.req_name()}),
    .narrow_in_resp_o (${narrow_cluster_in.rsp_name()}),
    .narrow_out_req_o  (${narrow_cluster_out.req_name()}),
    .narrow_out_resp_i (${narrow_cluster_out.rsp_name()}),
    .wide_out_req_o  (${wide_cluster_out.req_name()}),
    .wide_out_resp_i (${wide_cluster_out.rsp_name()}),
    .wide_in_req_i (${wide_cluster_in.req_name()}),
    .wide_in_resp_o (${wide_cluster_in.rsp_name()}),
    .sram_cfgs_i (sram_cfg_i.cluster)
  );
  %endif

% endfor
endmodule
